package threadapplication;

import java.io.File;
import java.io.UnsupportedEncodingException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * Главная форма
 * @author Катышев Никита
 */
public class MainForm extends JFrame {

    //Позволяет выбирать файлы для работы
    private final JFileChooser fileChooser = new javax.swing.JFileChooser();
    
    //Рабочие файлы
    private File fileIn=null, fileOut=null;
    /**
     * Потоки исполнения чтения и записи
     */
    private ReadThread readThread=null;
    private WriteThread writeThread=null;
    
    //Работает ли сейчас программа
    private boolean isWrite=false;
    
    //Поддерживается ли кодировка "cp1251" системой
    private boolean isCharset=true;
    /**
     * Произошла ли I/O ошибка
     */
    private volatile boolean isIOEx=false;
    public boolean isIOEx(){
        return isIOEx;
    }
    public void setIsIOEx(){
        this.isIOEx=true;
    }
    
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        File workingDirectory = new File(System.getProperty("user.dir"));
        fileChooser.setCurrentDirectory(workingDirectory);
        fileIn = new File(System.getProperty("user.dir")+"\\In.txt");
        fileOut = new File(System.getProperty("user.dir")+"\\Out.txt");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonIn = new javax.swing.JButton();
        buttonOut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buferSizeTxt = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        readButton = new javax.swing.JButton();
        writeButton = new javax.swing.JButton();
        buferContent = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonIn.setText("Выбрать входной файл");
        buttonIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInActionPerformed(evt);
            }
        });

        buttonOut.setText("Выбрать выходной файл");
        buttonOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOutActionPerformed(evt);
            }
        });

        jLabel1.setText("Размер буфера в байтах");

        buferSizeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        buferSizeTxt.setText("1");

        startButton.setText("Начать запись");
        startButton.setToolTipText("Для начала нужно выбрать рабочие файлы");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        readButton.setText("Остановить поток чтения");
        readButton.setToolTipText("Нельзя управлять потоками, пока не начата запись");
        readButton.setEnabled(false);

        writeButton.setText("Остановить поток записи");
        writeButton.setToolTipText("Нельзя управлять потоками, пока не начата запись");
        writeButton.setEnabled(false);

        buferContent.setEditable(false);
        buferContent.setText("Содержимое буфера");
        buferContent.setToolTipText("Здесь отображается наполнение буфера во время работы программы");
        buferContent.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonIn)
                    .addComponent(buttonOut)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buferSizeTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buferContent, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(startButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(readButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(writeButton)))
                .addContainerGap(391, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buferSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buferContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton)
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readButton)
                    .addComponent(writeButton))
                .addContainerGap(123, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInActionPerformed
        fileChooser.setDialogTitle("Выберите входной файл");
        if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }            
        fileIn = fileChooser.getSelectedFile();
        if(fileOut!=null){
            startButton.setEnabled(true);
        }
    }//GEN-LAST:event_buttonInActionPerformed

    private void buttonOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOutActionPerformed
        fileChooser.setDialogTitle("Выберите выходной файл");
        if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        fileOut = fileChooser.getSelectedFile();
        if(fileIn!=null){
            startButton.setEnabled(true);
        }
    }//GEN-LAST:event_buttonOutActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        changeMode();
        if(isWrite){
            Bufer bufer=new Bufer(this, getBuferSize());
            
            readThread=new ReadThread(this, bufer, fileIn);
            writeThread=new WriteThread(this, bufer, fileOut);
            
            readThread.start();
            writeThread.start();
        }
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * Получаем размер буфера
     * @return - размер буфера в байтах
     */
    public int getBuferSize(){
        try{
            return Integer.parseInt(buferSizeTxt.getText());
        }catch(NumberFormatException e){
            buferSizeTxt.setText("1");
            return 1;
        }
    }
    
    /**
     * Изменить режим отображения компонентов формы
     */
    private void changeMode(){
        isWrite=!isWrite;
        /**
         * Во время работы программы не можем поменять файлы
         */
        buttonIn.setEnabled(!isWrite);
        buttonOut.setEnabled(!isWrite);
        /**
         * Меняем надпись на стартующей кнопке
         */
        if(isWrite){
            startButton.setText("Прекратить запись");
        }else{
            startButton.setText("Начать запись");
        }
        /**
         * Потоками чтения и записи можем управлять только при работающей программе
         */
        readButton.setEnabled(isWrite);
        writeButton.setEnabled(isWrite);
        //Буфер можем задавать только при неработающей программе
        buferSizeTxt.setEnabled(!isWrite);
        
        buferContent.setEnabled(isWrite);
        buferContent.setText("Содержимое буфера");
    }
    
    /**
     * Запись окончена
     */
    public void finish(){
        if(isIOEx){
            JOptionPane.showMessageDialog(this, "Программа завершена со сбоем!");
        }else{
            JOptionPane.showMessageDialog(this, "Программа завершена успешно!");
        }
        changeMode();
    }
    
    /**
     * Отображает текущее наполнение буфера
     * @param b - массив байт, находящихся в буфере
     */
    public synchronized void setBuferContent(byte[] b){
        if(!isCharset){
            return;
        }
        if(b==null){
            buferContent.setText("");
            return;
        }
        try{
            buferContent.setText(new String(b, "cp1251"));
        }catch(UnsupportedEncodingException ex){
            JOptionPane.showMessageDialog(this, "Cистемой не поддерживается кодировка \"cp1251\". Содержимое буфера не может быть выведено.");
            isCharset=false;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField buferContent;
    private javax.swing.JTextField buferSizeTxt;
    private javax.swing.JButton buttonIn;
    private javax.swing.JButton buttonOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton readButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton writeButton;
    // End of variables declaration//GEN-END:variables
}