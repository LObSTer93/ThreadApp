package threadapplication;

import java.io.File;
import java.io.UnsupportedEncodingException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * Главная форма
 * @author Катышев Никита
 */
public class MainForm extends JFrame {

    //Позволяет выбирать файлы для работы
    private final JFileChooser fileChooser = new javax.swing.JFileChooser();
    
    //Рабочие файлы
    private File fileIn=null, fileOut=null;
    /**
     * Потоки исполнения чтения и записи
     */
    private ReadThread readThread;
    private WriteThread writeThread;
    
    //Работает ли сейчас программа
    private boolean isWrite=false;
    
    //Поддерживается ли кодировка "cp1251" системой
    private boolean isCharset=true;
    /**
     * Произошла ли ошибка
     */
    private volatile boolean isError=false;
    public boolean isError(){
        return isError;
    }
    public void setIsError(boolean isRead, Exception e){
        this.isError=true;
        System.out.println(e.toString());
        /**
         * При возникновении исключений в одном из потоков, 
         *      нужно, чтобы второй поток прекратил работу
         */
        synchronized(bufer){
            bufer.setIsFull(isRead);
            bufer.notifyAll();
        }
    }
    /**
     * Остановлен ли поток чтения
     */
    private volatile boolean stopRead;
    public boolean getStopRead(){
        return stopRead;
    }
    /**
     * Остановлен ли поток записи
     */
    private volatile boolean stopWrite;
    public boolean getStopWrite(){
        return stopWrite;
    }
    
    //буфер
    private Bufer bufer;
    
    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        
        File workingDirectory = new File(System.getProperty("user.dir"));
        fileChooser.setCurrentDirectory(workingDirectory);
        
        fileIn = new File(System.getProperty("user.dir")+"\\In.txt");
        fileOut = new File(System.getProperty("user.dir")+"\\Out.txt");
        
        readFileName.setVisible(false);
        writeFileName.setVisible(false);
        
        readStatus.setVisible(false);
        writeStatus.setVisible(false);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonIn = new javax.swing.JButton();
        buttonOut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buferSizeTxt = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        readButton = new javax.swing.JButton();
        writeButton = new javax.swing.JButton();
        buferContent = new javax.swing.JTextField();
        readFileName = new javax.swing.JLabel();
        writeFileName = new javax.swing.JLabel();
        readStatus = new javax.swing.JLabel();
        writeStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonIn.setText("Выбрать входной файл");
        buttonIn.setToolTipText("Для работы программы необходимо задать входной файл");
        buttonIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInActionPerformed(evt);
            }
        });

        buttonOut.setText("Выбрать выходной файл");
        buttonOut.setToolTipText("Для работы программы необходимо задать выходной файл");
        buttonOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOutActionPerformed(evt);
            }
        });

        jLabel1.setText("Размер буфера в байтах");

        buferSizeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        buferSizeTxt.setText("1");
        buferSizeTxt.setToolTipText("Во время работы программы будет использоваться буфер заданного размера");

        startButton.setText("Начать запись");
        startButton.setToolTipText("Для работы программы необходимо задать входной и выходной файлы");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        readButton.setText("Остановить поток чтения");
        readButton.setToolTipText("Данная кнопка управляет состоянием потока чтения во время работы программы");
        readButton.setEnabled(false);
        readButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readButtonActionPerformed(evt);
            }
        });

        writeButton.setText("Остановить поток записи");
        writeButton.setToolTipText("Данная кнопка управляет состоянием потока записи во время работы программы");
        writeButton.setEnabled(false);
        writeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeButtonActionPerformed(evt);
            }
        });

        buferContent.setEditable(false);
        buferContent.setText("Содержимое буфера");
        buferContent.setToolTipText("Здесь отображается наполнение буфера во время работы программы");
        buferContent.setEnabled(false);

        readFileName.setText("Имя файла для чтения");
        readFileName.setToolTipText("Здесь отображается имя входного файла во время работы программы");
        readFileName.setEnabled(false);

        writeFileName.setText("Имя файла для записи");
        writeFileName.setToolTipText("Здесь отображается имя выходного файла во время работы программы");
        writeFileName.setEnabled(false);

        readStatus.setText("Поток чтения в работе");
        readStatus.setToolTipText("Статус работы потока чтения");

        writeStatus.setText("Поток записи в работе");
        writeStatus.setToolTipText("Статус работы потока записи");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buferSizeTxt, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buferContent, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(startButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonIn)
                            .addComponent(buttonOut))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(writeFileName)
                            .addComponent(readFileName)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(readStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(readButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(writeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(writeStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonIn)
                    .addComponent(readFileName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonOut)
                    .addComponent(writeFileName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buferSizeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buferContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startButton)
                .addGap(89, 89, 89)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readButton)
                    .addComponent(writeButton))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readStatus)
                    .addComponent(writeStatus))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInActionPerformed
        fileChooser.setDialogTitle("Выберите входной файл");
        if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }            
        fileIn = fileChooser.getSelectedFile();
        if(fileOut!=null){
            readFileName.setVisible(true);
            readFileName.setText(fileIn.getName());
            startButton.setEnabled(true);
        }
    }//GEN-LAST:event_buttonInActionPerformed

    private void buttonOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOutActionPerformed
        fileChooser.setDialogTitle("Выберите выходной файл");
        if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return;
        }
        fileOut = fileChooser.getSelectedFile();
        if(fileIn!=null){
            writeFileName.setVisible(true);
            writeFileName.setText(fileOut.getName());
            startButton.setEnabled(true);
        }
    }//GEN-LAST:event_buttonOutActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        changeMode();
        
        isError=false;
        
        stopRead=false;
        stopWrite=false;
                
        bufer=new Bufer(this, getBuferSize());

        readThread=new ReadThread(this, bufer, fileIn);
        writeThread=new WriteThread(this, bufer, fileOut);

        readThread.start();
        writeThread.start();
    }//GEN-LAST:event_startButtonActionPerformed

    private void readButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readButtonActionPerformed
        stopRead=!stopRead;
        if(stopRead){
            readButton.setText("Запустить поток чтения");
            readStatus.setText("Поток чтения остановлен");
        }else{
            readButton.setText("Остановить поток чтения");
            readStatus.setText("Поток чтения в работе");
            synchronized(bufer){
                bufer.notifyAll();
            }
        }
    }//GEN-LAST:event_readButtonActionPerformed

    private void writeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeButtonActionPerformed
        stopWrite=!stopWrite;
        if(stopWrite){
            writeButton.setText("Запустить поток записи");
            writeStatus.setText("Поток записи остановлен");
        }else{
            writeButton.setText("Остановить поток записи");
            writeStatus.setText("Поток записи в работе");
            synchronized(bufer){
                bufer.notifyAll();
            }
        }
    }//GEN-LAST:event_writeButtonActionPerformed

    /**
     * Получаем размер буфера
     * @return - размер буфера в байтах
     */
    public int getBuferSize(){
        try{
            return Integer.parseInt(buferSizeTxt.getText());
        }catch(NumberFormatException e){
            buferSizeTxt.setText("1");
            return 1;
        }
    }
    
    /**
     * Изменить режим отображения компонентов формы
     */
    private void changeMode(){
        isWrite=!isWrite;

        buttonIn.setEnabled(!isWrite);
        buttonOut.setEnabled(!isWrite);

        startButton.setEnabled(!isWrite);

        readButton.setEnabled(isWrite);
        writeButton.setEnabled(isWrite);

        buferSizeTxt.setEnabled(!isWrite);
        
        buferContent.setEnabled(isWrite);
        buferContent.setText("Содержимое буфера");
        
        readStatus.setVisible(isWrite);
        writeStatus.setVisible(isWrite);
    }
    
    /**
     * Запись окончена
     */
    public void finish(){
        if(isError){
            JOptionPane.showMessageDialog(this, "Программа завершена со сбоем!");
        }else{
            JOptionPane.showMessageDialog(this, "Программа завершена успешно!");
        }
        changeMode();
    }
    
    /**
     * Отображает текущее наполнение буфера
     * @param b - массив байт, находящихся в буфере
     */
    public synchronized void setBuferContent(byte[] b){
        if(!isCharset){
            return;
        }
        if(b==null){
            buferContent.setText("");
            return;
        }
        try{
            buferContent.setText(new String(b, "cp1251"));
        }catch(UnsupportedEncodingException ex){
            JOptionPane.showMessageDialog(this, "Cистемой не поддерживается кодировка \"cp1251\". Содержимое буфера не может быть выведено.");
            isCharset=false;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainForm().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField buferContent;
    private javax.swing.JTextField buferSizeTxt;
    private javax.swing.JButton buttonIn;
    private javax.swing.JButton buttonOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton readButton;
    private javax.swing.JLabel readFileName;
    private javax.swing.JLabel readStatus;
    private javax.swing.JButton startButton;
    private javax.swing.JButton writeButton;
    private javax.swing.JLabel writeFileName;
    private javax.swing.JLabel writeStatus;
    // End of variables declaration//GEN-END:variables
}